# Developer Tools Dark Web Activation Windows - Protection Script
# Developers by: XenoByte & bytemebaby

$Name = "Dark Web Activation Windows"
$Version = "1.0.2"

# Display version and developer information at the start
Write-Host "Welcome to Dark Web - Protection"
Write-Host "Program Version: $Version"
Write-Host "Developers: XenoByte & bytemebaby"
Write-Host ""

# Available protection periods
$ProtectionPeriods = @("14 Days", "1 Month", "6 Months", "12 Months", "24 Months")

# Display protection options with numbers
Write-Host "Choose a protection plan:"
for ($i = 0; $i -lt $ProtectionPeriods.Length; $i++) {
    Write-Host "$($i+1). $($ProtectionPeriods[$i])"
}

# Ask the user to select a protection plan by number
$selection = Read-Host "Enter your choice (1 for '14 Days', 2 for '1 Month', etc.)"
$chosenProtection = $ProtectionPeriods[$selection - 1]

# Function to check if the current user is the owner
function Is-Owner {
    $ownerUsername = "OwnerUsername"
    $currentUsername = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name.Split("\")[1]
    return $currentUsername -eq $ownerUsername
}

# Function to get the user's IP address and location
function Get-UserLocation {
    $ipInfo = Invoke-RestMethod -Uri "https://ipinfo.io/json"
    $ipAddress = $ipInfo.ip
    $location = "$($ipInfo.city), $($ipInfo.region), $($ipInfo.country)"
    Write-Host "Your IP address is: $ipAddress"
    Write-Host "Your location is: $location"
    return $ipInfo
}

# Perform antivirus scan using Windows Defender
Write-Host "Performing real-time antivirus scan with Windows Defender..."
$scanStatus = Get-MpComputerStatus
if ($scanStatus.AntivirusScanRunning -eq $false) {
    Start-MpScan -ScanType FullScan
} else {
    Write-Host "An antivirus scan is already running."
}

# Call the function to get user's location
$userLocation = Get-UserLocation

# Block access based on country restrictions
$blockedCountries = @("RU", "CN")
if ($blockedCountries -contains $userLocation.country) {
    Write-Host "Your location is blocked from accessing this service."
    Write-Host "Proceeding with local protection configuration..."

    # Enable Windows Firewall and Security measures
    Write-Host "Enabling Windows Firewall and protection..."
    Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True
    
    Write-Host "Blocking attacks with Windows Defender's real-time protection..."
    Set-MpPreference -DisableRealtimeMonitoring $false
    
    # Enable TPM-based security if supported
    Write-Host "Checking TPM status..."
    $tpmStatus = Get-WmiObject -Namespace "Root\CIMv2\Security\MicrosoftTpm" -Class Win32_Tpm
    if ($tpmStatus.IsEnabled) {
        Write-Host "TPM is enabled and active."
    } else {
        Write-Host "TPM is not enabled. Please enable it from BIOS for better security."
    }
} else {
    Write-Host "Your location is allowed, proceeding with protection setup."

    # Perform protection setup without VPN
    Write-Host "Enabling Windows Firewall and protection..."
    Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled True

    Write-Host "Blocking attacks with Windows Defender's real-time protection..."
    Set-MpPreference -DisableRealtimeMonitoring $false
}

# Display the selected protection period
Write-Host "You selected the '$chosenProtection' plan."
Write-Host "Protection plan is active for $chosenProtection without the need for a key."

# Final message
Write-Host ""
Write-Host "Thank you for using Dark Web Services"
Write-Host "Program Version: $Version"
Write-Host "Developers: XenoByte & bytemebaby"
